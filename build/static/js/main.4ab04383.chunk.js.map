{"version":3,"sources":["components/colorball.js","components/display.js","App.js","index.js"],"names":["Circle","props","react_default","a","createElement","cx","loc","x","cy","y","r","radius","fill","color","onClick","click","Display","className","score","level","class","App","state","pickedcolors","balls","startingballs","shuffle","randompositions","Object","keys","positions","map","Math","random","sort","b","newballs","_this","ball","pop","setState","clickball","includes","alert","concat","forEach","newcolor","levels","_this2","this","display","viewBox","colorball","assign","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"mbAYeA,EAVA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UACEC,GAAIJ,EAAMK,IAAIC,EACdC,GAAIP,EAAMK,IAAIG,EACdC,EAAGT,EAAMU,OACTC,KAAMX,EAAMY,MACZC,QAAS,kBAAIb,EAAMc,MAAMd,EAAMY,WCOpBG,EAbC,SAAAf,GAAK,OACnBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKa,UAAU,gCACXf,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMiB,MAAlB,OACAhB,EAAAC,EAAAC,cAAA,mBAAWH,EAAMkB,QAErBjB,EAAAC,EAAAC,cAAA,OAAKa,UAAU,8BACbf,EAAAC,EAAAC,cAAA,KAAGgB,MAAM,oBAAT,iDCyESC,6MAzEXC,MAAQ,CACJJ,MAAO,EACPK,aAAc,GACdJ,MAAO,EACPK,MAAOC,KAGXC,QAAU,WAEN,IAAMC,EAAkBC,OAAOC,KAAKC,GAC/BC,IAAI,SAAA5B,GAAC,MAAI,CAAC6B,KAAKC,SAAU9B,KACzB+B,KAAK,SAAC/B,EAAGgC,GAAJ,OAAUhC,EAAE,GAAKgC,EAAE,KACxBJ,IAAI,SAAA5B,GAAC,OAAIA,EAAE,KAGViC,EAAWC,EAAKf,MAAME,MAAMO,IAAI,SAAAO,GAElC,OADAA,EAAKhC,IAAMwB,EAAUH,EAAgBY,OAC9BD,IAIXD,EAAKG,SAAS,CAAEhB,MAAOY,OAG3BK,UAAY,SAAA5B,GAEJwB,EAAKf,MAAMC,aAAamB,SAAS7B,IACjC8B,MAAM,oCACNN,EAAKG,SAAS,CACVjB,aAAc,GACdL,MAAO,MAGXmB,EAAKG,SAAS,CACVjB,aAAcc,EAAKf,MAAMC,aAAaqB,OAAO,CAAC/B,IAC9CK,MAAOmB,EAAKf,MAAMJ,MAAQ,IAE1BmB,EAAKf,MAAMJ,OAAS,KAEpByB,MAAM,aAENN,EAAKG,SAAS,CACVjB,aAAc,GACdL,MAAO,EACPC,MAAOkB,EAAKf,MAAMH,MAAQ,IAE9BkB,EAAKf,MAAME,MAAMqB,QAAQ,SAAAP,GACrB,IAAMQ,EAAWC,EACb,SAAWV,EAAKf,MAAMH,MAAQ,IAChCoB,MACFD,EAAKzB,MAAQiC,MAKzBT,EAAKX,mFAGA,IAAAsB,EAAAC,KACL,OACI/C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8C,EAAD,CAAShC,MAAO+B,KAAK3B,MAAMJ,MAAOC,MAAO8B,KAAK3B,MAAMH,QAEpDjB,EAAAC,EAAAC,cAAA,OAAK+C,QAAQ,mBACRF,KAAK3B,MAAME,MAAMO,IAAI,SAAAO,GAAI,OACtBpC,EAAAC,EAAAC,cAACgD,EAADxB,OAAAyB,OAAA,GAAYf,EAAZ,CAAkBvB,MAAOiC,EAAKP,wBAlEpCa,IAAMC,WCLxBC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.4ab04383.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Circle = props => (\n  <circle\n    cx={props.loc.x}\n    cy={props.loc.y}\n    r={props.radius}\n    fill={props.color}\n    onClick={()=>props.click(props.color)}\n  />\n);\n\nexport default Circle;\n","import React from \"react\";\n\nconst Display = props => (\n  <div>\n    <nav className=\"navbar navbar-light bg-light\">\n        <h1>Memory Balls</h1>\n        <h1>Score: {props.score}/12</h1>\n        <h1>Level {props.level}</h1>\n    </nav>\n    <div className=\"row justify-content-center\">\n      <p class='alert alert-info'> pick each color once</p>\n    </div>\n  </div>\n);\n\nexport default Display;\n","import React from \"react\";\n\nimport Circle from \"./components/colorball\";\nimport Display from \"./components/display\";\n\nimport positions from \"./positions.json\";\nimport startingballs from \"./startingballs.json\";\nimport levels from \"./levels.json\";\n\nclass App extends React.Component {\n    state = {\n        score: 0,\n        pickedcolors: [],\n        level: 1,\n        balls: startingballs\n    };\n\n    shuffle = () => {\n        //get an array of the 12 positions in random order\n        const randompositions = Object.keys(positions)\n            .map(a => [Math.random(), a])\n            .sort((a, b) => a[0] - b[0])\n            .map(a => a[1]);\n\n        //get a copy of balls with random positions\n        const newballs = this.state.balls.map(ball => {\n            ball.loc = positions[randompositions.pop()];\n            return ball;\n        });\n\n        //set state balls to copy\n        this.setState({ balls: newballs });\n    };\n\n    clickball = color => {\n        //determin right from wrong\n        if (this.state.pickedcolors.includes(color)) {\n            alert(\"you've already picked that color\");\n            this.setState({\n                pickedcolors: [],\n                score: 0\n            });\n        } else {\n            this.setState({\n                pickedcolors: this.state.pickedcolors.concat([color]),\n                score: this.state.score + 1\n            });\n            if (this.state.score >= 11) {\n                //set next level\n                alert(\"great job\");\n\n                this.setState({\n                    pickedcolors: [],\n                    score: 0,\n                    level: this.state.level + 1\n                });\n                this.state.balls.forEach(ball => {\n                    const newcolor = levels[\n                        \"level\" + (this.state.level + 1)\n                    ].pop();\n                    ball.color = newcolor;\n                });\n              }\n        }\n\n        this.shuffle();\n    };\n\n    render() {\n        return (\n            <div>\n                <Display score={this.state.score} level={this.state.level} />\n\n                <svg viewBox=\"0 0 841.9 595.3\">\n                    {this.state.balls.map(ball => (\n                        <Circle {...ball} click={this.clickball} />\n                    ))}\n                </svg>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}